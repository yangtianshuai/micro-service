plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    // 本地仓库，地址是maven本地仓库地址
    mavenLocal()
    // 阿里云仓库
    maven { url 'https://maven.aliyun.com/repository/central' }
    maven { url 'https://maven.aliyun.com/repository/google' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    maven { url 'https://maven.aliyun.com/repository/jcenter' }
    maven { url 'https://maven.aliyun.com/repository/spring' }
    maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
    maven { url 'https://maven.aliyun.com/repository/releases' }
    maven { url 'https://maven.aliyun.com/repository/spring-plugin' }
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://maven.aliyun.com/repository/releases' }
    maven { url 'https://maven.aliyun.com/repository/grails-core' }
    maven { url 'https://maven.aliyun.com/repository/mapr-public' }
    // 中央仓库
    mavenCentral()
}

ext {
    springCloudAlibabaVersion = '2022.0.0.0-RC2'
    springCloudVersion = '2022.0.3'

    oracleJdbcVersion = '21.1.0.0'
    colaVersion = '4.0.0'
    springBootAdminVersion = '3.1.2'
    lombokVersion = '1.18.28'
}

dependencyManagement {
    imports {
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    implementation fileTree(dir:'lib',includes:['*jar'])
    //只编译不打包
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    //注释处理器
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    //COLA
    implementation "com.alibaba.cola:cola-component-domain-starter:${colaVersion}"
    implementation "com.alibaba.cola:cola-component-dto:${colaVersion}"
    implementation "com.alibaba.cola:cola-component-exception:${colaVersion}"

    implementation "org.apache.commons:commons-lang3:3.11"

    //Oracle
    implementation "com.oracle.database.jdbc:ojdbc8:${oracleJdbcVersion}"
    implementation "com.oracle.database.nls:orai18n:${oracleJdbcVersion}"
    //Spring Boot Admin客户端
    implementation "de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}"

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    //RabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    //Nacos服务注册发现
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery'
    //Nacos配置中心
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config'
    //Seata
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-seata'
    //Sentinel
    implementation 'com.alibaba.cloud:spring-cloud-starter-alibaba-sentinel'
    //Spring Cloud Stream
    implementation 'org.springframework.cloud:spring-cloud-stream'
    //Loadbalancer
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    //Swagger
    implementation 'com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:4.3.0'
    //Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //Retry
    implementation 'org.springframework.retry:spring-retry:1.3.1'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
}

tasks.named('test') {
    useJUnitPlatform()
}
